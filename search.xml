<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Airclipbd.com 隔空剪切板</title>
    <url>/2024/07/05/airclipbd-0705/</url>
    <content><![CDATA[<blockquote>
<p>Snapdrop + Clipboard + ChatGPT &#x3D; Airclipbd.com 隔空剪切板</p>
</blockquote>
<h3 id="SnapDrop-局域网内点对点传输"><a href="#SnapDrop-局域网内点对点传输" class="headerlink" title="SnapDrop 局域网内点对点传输"></a>SnapDrop 局域网内点对点传输</h3><p>Snapdrop: local file sharing in your browser. Inspired by Apple’s Airdrop.</p>
<p><a href="https://github.com/RobinLinus/snapdrop">https://github.com/RobinLinus/snapdrop</a></p>
<ul>
<li>同一网络内设备自动发现</li>
<li>设备间文件点对点传输 Peer2Peer</li>
</ul>
<h3 id="Clipboard-在线剪切板"><a href="#Clipboard-在线剪切板" class="headerlink" title="Clipboard 在线剪切板"></a>Clipboard 在线剪切板</h3><ul>
<li>支持剪切板空间 <code>/$&#123;board_name&#125;</code></li>
<li>公开读写，寄存简单方便</li>
<li>剪贴板复制内容直接粘贴，支持文字、图片、各种文件。</li>
<li>限制粘贴内容最大20MB，每个剪切板空间暂存最新20条记录。</li>
<li>暂存6小时</li>
</ul>
<h3 id="ChatGPT-提供强大的技术支持"><a href="#ChatGPT-提供强大的技术支持" class="headerlink" title="ChatGPT 提供强大的技术支持"></a>ChatGPT 提供强大的技术支持</h3><ul>
<li>前端支持 HTML, CSS, Javascript</li>
<li>后端支持 Golang, Gin, Redis, Websocket</li>
</ul>
<h3 id="开发过程与当前进展-2024-07-05"><a href="#开发过程与当前进展-2024-07-05" class="headerlink" title="开发过程与当前进展 2024&#x2F;07&#x2F;05"></a>开发过程与当前进展 2024&#x2F;07&#x2F;05</h3><span id="more"></span>

<p><img src="/./images/airclipbd_20240705.png" alt="image info"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AirClipboard</category>
      </categories>
      <tags>
        <tag>AirClipboard</tag>
      </tags>
  </entry>
  <entry>
    <title>关于WebRTC的一些技术总结和记录</title>
    <url>/2024/07/15/%E5%85%B3%E4%BA%8EWebRTC%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93%E5%92%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="什么是-WebRTC？"><a href="#什么是-WebRTC？" class="headerlink" title="什么是 WebRTC？"></a>什么是 WebRTC？</h2><p>WebRTC（Web Real-Time Communication）是一种允许网页和应用程序进行实时通信（RTC）的技术。它支持点对点的视频、音频和数据传输，无需安装额外的插件或应用程序。WebRTC 的主要特点如下：</p>
<ol>
<li><strong>实时通信</strong>：WebRTC 允许用户通过浏览器直接进行语音和视频通话，以及数据共享。</li>
<li><strong>点对点连接</strong>：WebRTC 可以直接在两个用户间建立连接，实现数据的直接传输，而非通过中心服务器。这样做可以减少延迟和提高通信效率。</li>
<li><strong>兼容性</strong>：它是一个开放标准，被大多数现代浏览器支持，包括 Chrome、Firefox、Safari 和 Edge。</li>
<li><strong>安全性</strong>：所有 WebRTC 组件都要求使用安全的起点（HTTPS），并对所有数据进行加密传输。</li>
<li><strong>多功能性</strong>：除了音视频通话，WebRTC 还支持各种数据传输，包括文件共享和实时文本聊天。</li>
<li><strong>NAT 穿透</strong>：WebRTC 使用 STUN&#x2F;TURN 服务器来处理 NAT（网络地址转换）和防火墙穿透，确保不同网络环境下的设备可以相互连接。</li>
<li><strong>媒体捕获和处理</strong>：WebRTC 提供了捕获本地媒体（如摄像头和麦克风输入）、处理和播放远程媒体的能力。</li>
<li><strong>标准化 API</strong>：提供了一套标准的 API，方便开发者在网络应用中集成实时通信功能。</li>
</ol>
<p>总之，WebRTC 是一种强大的实时通信技术，使得在不同平台和设备之间的音视频通话和数据共享变得简单和高效。</p>
<h2 id="WebRTC-的-NAT-穿透"><a href="#WebRTC-的-NAT-穿透" class="headerlink" title="WebRTC 的 NAT 穿透"></a>WebRTC 的 NAT 穿透</h2><p>WebRTC 中的 NAT（网络地址转换）穿透是一个关键技术，用于在两个位于不同网络（例如家庭或企业网络）的设备之间建立直接的通信连接。NAT 穿透对于保证 WebRTC 能够在各种网络环境下正常工作至关重要。以下是 WebRTC NAT 穿透的详细介绍：</p>
<h3 id="1-NAT-问题的背景"><a href="#1-NAT-问题的背景" class="headerlink" title="1. NAT 问题的背景"></a>1. NAT 问题的背景</h3><ul>
<li><strong>NAT 的作用</strong>：NAT 使多个设备能够共享一个公共 IP 地址，同时保持它们的内部（私有）IP 地址。这是家庭和企业网络常用的一种方法。</li>
<li><strong>NAT 对 P2P 的影响</strong>：NAT 使得点对点（P2P）通信变得复杂，因为外部网络无法直接访问内部网络中的设备。</li>
</ul>
<span id="more"></span>


<h3 id="2-WebRTC-的-NAT-穿透技术"><a href="#2-WebRTC-的-NAT-穿透技术" class="headerlink" title="2. WebRTC 的 NAT 穿透技术"></a>2. WebRTC 的 NAT 穿透技术</h3><p>WebRTC 使用几种技术来解决 NAT 问题：</p>
<h4 id="a-ICE（Interactive-Connectivity-Establishment）"><a href="#a-ICE（Interactive-Connectivity-Establishment）" class="headerlink" title="a. ICE（Interactive Connectivity Establishment）"></a>a. ICE（Interactive Connectivity Establishment）</h4><ul>
<li><strong>功能</strong>：ICE 是一种框架，用于收集设备的多种网络地址（候选者），并尝试通过这些地址建立连接。</li>
<li><strong>候选者类型</strong>：包括本地地址、反射地址（通过 STUN 获得）和中继地址（通过 TURN 获得）。</li>
</ul>
<h4 id="b-STUN（Session-Traversal-Utilities-for-NAT）"><a href="#b-STUN（Session-Traversal-Utilities-for-NAT）" class="headerlink" title="b. STUN（Session Traversal Utilities for NAT）"></a>b. STUN（Session Traversal Utilities for NAT）</h4><ul>
<li><strong>用途</strong>：STUN 服务器帮助设备发现其公共 IP 地址和端口，这对于穿越 NAT 是必需的。</li>
<li><strong>工作原理</strong>：设备向 STUN 服务器发送请求，服务器回应设备的公共 IP 地址和端口。</li>
</ul>
<h4 id="c-TURN（Traversal-Using-Relays-around-NAT）"><a href="#c-TURN（Traversal-Using-Relays-around-NAT）" class="headerlink" title="c. TURN（Traversal Using Relays around NAT）"></a>c. TURN（Traversal Using Relays around NAT）</h4><ul>
<li><strong>场景</strong>：在某些复杂的 NAT 情况下，STUN 无法实现穿透，此时需要 TURN。</li>
<li><strong>功能</strong>：TURN 服务器充当中继，转发两个尝试连接的设备之间的流量。</li>
<li><strong>影响</strong>：虽然有效，但使用 TURN 会增加延迟和带宽消耗。</li>
</ul>
<h3 id="3-NAT-穿透过程"><a href="#3-NAT-穿透过程" class="headerlink" title="3. NAT 穿透过程"></a>3. NAT 穿透过程</h3><ol>
<li><strong>收集候选者</strong>：设备使用 ICE 框架来收集其所有可能的网络地址（本地、反射和中继）。</li>
<li><strong>候选者交换</strong>：通信双方通过信令通道交换他们的 ICE 候选者信息。</li>
<li><strong>连接尝试</strong>：双方尝试使用收集到的候选者信息来建立直接的 P2P 连接。</li>
<li><strong>选择最佳路径</strong>：在成功建立连接后，将选择最有效的路径进行数据传输。</li>
</ol>
<h3 id="4-重要性"><a href="#4-重要性" class="headerlink" title="4. 重要性"></a>4. 重要性</h3><ul>
<li><strong>保证连通性</strong>：NAT 穿透使得位于不同 NAT 后面的设备可以建立直接的通信连接。</li>
<li><strong>提高效率</strong>：虽然使用 TURN 会增加资源消耗，但大多数情况下，ICE 和 STUN 足以成功穿越 NAT，确保通信的高效性。</li>
</ul>
<h3 id="5-实践中的挑战"><a href="#5-实践中的挑战" class="headerlink" title="5. 实践中的挑战"></a>5. 实践中的挑战</h3><ul>
<li><strong>复杂的 NAT 类型</strong>：对于对称型 NAT，仅靠 STUN 可能无法成功穿越，需要依赖 TURN。</li>
<li><strong>资源和成本</strong>：维护 TURN 服务器可能涉及额外的资源和成本。</li>
</ul>
<p>WebRTC 通过这些 NAT 穿透技术，确保了在不同网络环境下都能够实现可靠和高效的实时通信。</p>
<h2 id="搭建基于-WebRTC-的视频通话系统"><a href="#搭建基于-WebRTC-的视频通话系统" class="headerlink" title="搭建基于 WebRTC 的视频通话系统"></a>搭建基于 WebRTC 的视频通话系统</h2><p>搭建基于 WebRTC 的视频通话系统涉及多个步骤，主要包括信令、NAT 穿透、媒体捕获与渲染等。下面是搭建这种系统的基本指南，假设你想在两个不同的家庭网络中实现视频通话：</p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ul>
<li><strong>了解 WebRTC</strong>: 需要基本的了解关于 WebRTC 的工作原理。</li>
<li><strong>编程技能</strong>: 熟悉至少一种编程语言，如 JavaScript（对于 Web 应用程序）。</li>
</ul>
<h3 id="2-信令服务器"><a href="#2-信令服务器" class="headerlink" title="2. 信令服务器"></a>2. 信令服务器</h3><ul>
<li><strong>作用</strong>: 用于交换 WebRTC 通信双方的元数据，如 ICE 候选者、会话描述协议（SDP）信息等。</li>
<li><strong>搭建方式</strong>: 可以使用 WebSocket、REST API 等技术搭建一个简单的信令服务器。这可以使用 Node.js、Python 等后端技术实现。</li>
</ul>
<h3 id="3-STUN-TURN-服务器"><a href="#3-STUN-TURN-服务器" class="headerlink" title="3. STUN&#x2F;TURN 服务器"></a>3. STUN&#x2F;TURN 服务器</h3><ul>
<li><strong>STUN</strong>: 使用公共 STUN 服务器（如 Google 的 STUN 服务器: <code>stun:stun.l.google.com:19302</code>）或自建 STUN 服务器。</li>
<li><strong>TURN</strong>: 对于更复杂的 NAT 穿透情况，可能需要 TURN 服务器。可以使用开源解决方案如 coturn。</li>
</ul>
<h3 id="4-媒体捕获和处理"><a href="#4-媒体捕获和处理" class="headerlink" title="4. 媒体捕获和处理"></a>4. 媒体捕获和处理</h3><ul>
<li><strong>API 使用</strong>: 利用 WebRTC 提供的 API 如 <code>getUserMedia</code> 来捕获音频和视频媒体流。</li>
<li><strong>显示媒体</strong>: 使用 HTML 的 <code>&lt;video&gt;</code> 标签来显示捕获的视频流。</li>
</ul>
<h3 id="5-前端实现"><a href="#5-前端实现" class="headerlink" title="5. 前端实现"></a>5. 前端实现</h3><ul>
<li><strong>编写客户端代码</strong>: 使用 HTML&#x2F;CSS&#x2F;JavaScript 创建用户界面。</li>
<li><strong>集成 WebRTC</strong>: 在客户端代码中集成 WebRTC API，实现视频通话的建立、维持和结束。</li>
</ul>
<h3 id="6-建立连接"><a href="#6-建立连接" class="headerlink" title="6. 建立连接"></a>6. 建立连接</h3><ul>
<li><strong>交换 SDP</strong>: 通过信令服务器交换双方的 SDP 描述。</li>
<li><strong>交换 ICE 候选者</strong>: 通过信令服务器交换 ICE 候选信息以建立连接。</li>
</ul>
<h3 id="7-测试和调试"><a href="#7-测试和调试" class="headerlink" title="7. 测试和调试"></a>7. 测试和调试</h3><ul>
<li><strong>本地测试</strong>: 首先在本地网络环境中测试视频通话功能。</li>
<li><strong>跨网络测试</strong>: 然后在两个不同的家庭网络中测试，确保 NAT 穿透有效。</li>
</ul>
<h3 id="8-部署"><a href="#8-部署" class="headerlink" title="8. 部署"></a>8. 部署</h3><ul>
<li><strong>信令服务器部署</strong>: 将信令服务器部署到云服务或公共服务器上。</li>
<li><strong>客户端访问</strong>: 确保用户可以通过互联网访问前端应用。</li>
</ul>
<h3 id="9-安全性和隐私"><a href="#9-安全性和隐私" class="headerlink" title="9. 安全性和隐私"></a>9. 安全性和隐私</h3><ul>
<li><strong>使用 HTTPS</strong>: 确保应用使用 HTTPS，这是 WebRTC 的一个要求。</li>
<li><strong>数据加密</strong>: WebRTC 本身就提供端到端加密。</li>
</ul>
<h3 id="10-可扩展性和性能优化"><a href="#10-可扩展性和性能优化" class="headerlink" title="10. 可扩展性和性能优化"></a>10. 可扩展性和性能优化</h3><ul>
<li><strong>适应不同带宽</strong>: 实现适应不同网络条件的逻辑。</li>
<li><strong>优化用户体验</strong>: 根据需要优化界面和用户交互。</li>
</ul>
<p>搭建基于 WebRTC 的视频通话系统需要对网络编程、前端开发和后端服务有一定的了解。这个过程涉及到多个技术点，但 WebRTC 提供了大多数必要的工具来简化这个过程。成功实现后，你将拥有一个能够在不同家庭网络间进行视频通话的系统。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>NAT穿透</tag>
        <tag>视频通话</tag>
      </tags>
  </entry>
  <entry>
    <title>通过expect登录linux, vim行错乱问题解决方案</title>
    <url>/2024/09/03/%E9%80%9A%E8%BF%87expect%E7%99%BB%E5%BD%95linux,%20vim%E8%A1%8C%E9%94%99%E4%B9%B1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>当使用 expect 登入你的虚拟主机的时候，你会发现使用 vim，会经常出现行错乱的问题。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>expect 脚本自动 ssh 登陆，当终端窗口发生变化时，默认 expect 不会将终端窗口大小改变的信号传送到远程的服务器上，因此在使用上会出现很不方便的地方，比如 vim 打开文件时出现串行，要是含有中文的文件可能根本无法编辑。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env expect </span></span><br><span class="line"><span class="comment">#trap sigwinch spawned</span></span><br><span class="line"><span class="built_in">trap</span> &#123;</span><br><span class="line"> <span class="built_in">set</span> rows [<span class="built_in">stty</span> rows]</span><br><span class="line"> <span class="built_in">set</span> cols [<span class="built_in">stty</span> columns]</span><br><span class="line"> <span class="built_in">stty</span> rows <span class="variable">$rows</span> columns <span class="variable">$cols</span> &lt; <span class="variable">$spawn_out</span>(slave,name)</span><br><span class="line">&#125; WINCH</span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></figure>

<p>结果你发现完全OK ，不再乱行了</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare + MailChannels 使用 DKIM 发送电子邮件</title>
    <url>/2024/07/05/Cloudflare%20+%20MailChannels%20%E4%BD%BF%E7%94%A8%20DKIM%20%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>独立开发者必看，cloudflare worker 其实也能发邮件，而且是比较优雅地发邮件</p>
</blockquote>
<p><a href="https://web.okjike.com/originalPost/65203d2205145f31e56e0707">https://web.okjike.com/originalPost/65203d2205145f31e56e0707</a></p>
<h3 id="什么是-DKIM-？"><a href="#什么是-DKIM-？" class="headerlink" title="什么是 DKIM ？"></a>什么是 DKIM ？</h3><p><a href="https://www.cloudflare.com/zh-cn/learning/dns/dns-records/dns-dkim-record/">https://www.cloudflare.com/zh-cn/learning/dns/dns-records/dns-dkim-record/</a></p>
<ul>
<li><p>参考1</p>
<p>  Cloudflare Email Routing 免费邮件发送服务</p>
<p>  <a href="https://eleduck.com/posts/4lfxE0">https://eleduck.com/posts/4lfxE0</a></p>
</li>
<li><p>参考2</p>
<p>  Cloudflare Email Routing 免费邮件发送（作为 Service 服务）用于 Workers&#x2F;Pages 项目中。****</p>
<p>  <a href="https://github.com/willin/cloudflare-send-email-service">https://github.com/willin/cloudflare-send-email-service</a></p>
</li>
<li><p>参考3</p>
<p>  <strong>Cloudflare + MailChannels 使用 DKIM 发送电子邮件</strong></p>
<p>  <a href="https://github.com/r0n9/mail">https://github.com/r0n9/mail</a></p>
</li>
</ul>
<h3 id="终于搞定！！！记录一下步骤，如下："><a href="#终于搞定！！！记录一下步骤，如下：" class="headerlink" title="终于搞定！！！记录一下步骤，如下："></a>终于搞定！！！记录一下步骤，如下：</h3><span id="more"></span>

<h4 id="1-CloudFlare-添加域名-yourdomain-com"><a href="#1-CloudFlare-添加域名-yourdomain-com" class="headerlink" title="1. CloudFlare 添加域名 yourdomain.com"></a>1. CloudFlare 添加域名 <code>yourdomain.com</code></h4><h4 id="2-启用Email路由："><a href="#2-启用Email路由：" class="headerlink" title="2. 启用Email路由："></a>2. 启用Email路由：</h4><pre><code>[Enable Email Routing · Cloudflare Email Routing docs](https://developers.cloudflare.com/email-routing/get-started/enable-email-routing/)
</code></pre>
<h4 id="3-本地安装-wrangler-以部署-cf-worker。注意-node-版本。"><a href="#3-本地安装-wrangler-以部署-cf-worker。注意-node-版本。" class="headerlink" title="3. 本地安装 wrangler 以部署 cf worker。注意 node 版本。"></a>3. 本地安装 <code>wrangler</code> 以部署 cf worker。注意 node 版本。</h4><pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">sudo npm install wrangler@latest -g</span><br></pre></td></tr></table></figure>

在开始之前，请确保按照此处的说明设置 Wrangler。 [here](https://developers.cloudflare.com/workers/wrangler/get-started/)
</code></pre>
<h4 id="4-生成私钥-Generate-the-Private-Key"><a href="#4-生成私钥-Generate-the-Private-Key" class="headerlink" title="4. 生成私钥 Generate the Private Key"></a>4. 生成私钥 <strong>Generate the Private Key</strong></h4><pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">openssl genrsa <span class="number">2048</span> | tee priv_key.<span class="property">pem</span> | openssl rsa -outform der | openssl base64 -A | wrangler secret put <span class="variable constant_">DKIM_PRIVATE_KEY</span></span><br></pre></td></tr></table></figure>

此命令的各个部分：

- `openssl genrsa 2048` 生成 2048 位 RSA 密钥
- `tee priv_key.pem` 将密钥写入 `priv_key.pem` 文件
- `openssl rsa -outform der | openssl base 64 -A` 将密钥从 PEM 格式转换为 DER 格式，然后对其进行 base64 编码（这实质上是从 PEM 格式的密钥中删除标头）
- `wrangler secret put DKIM_PRIVATE_KEY` 将它作为秘密添加到我们的 Cloudflare Worker 中
</code></pre>
<h4 id="5-CloudFalare-DNS-管理页面，创建-4-个-DNS-TXT-记录"><a href="#5-CloudFalare-DNS-管理页面，创建-4-个-DNS-TXT-记录" class="headerlink" title="5. CloudFalare DNS 管理页面，创建 4 个 DNS TXT 记录"></a>5. CloudFalare DNS 管理页面，创建 4 个 DNS TXT 记录</h4><pre><code>![Untitled](./images/dkim3.png)

- 创建第一个 `TXT` 解析记录
    
    运行以下命令，这将从私钥 `priv_key.pem` 创建一个公钥，编码为 base64，最后将其写入 `record.txt` 文件。
    
    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;v=DKIM1;p=&quot;</span> &gt; record.txt &amp;&amp; openssl rsa -<span class="keyword">in</span> priv_key.pem -pubout -outform der | openssl <span class="built_in">base64</span> -A &gt;&gt; record.txt</span><br></pre></td></tr></table></figure>
    
    复制 `record.txt` 文件的内容，并将其作为 `TXT` 记录添加到您的域中。 
    
    - Name: `mailchannels._domainkey`
    
    ![Untitled](./images/dkim2.png)
    
- 创建第二个 `TXT` 解析记录
    - Name: `yourdomain.com`
    - Value: `v=spf1 a mx include:relay.mailchannels.net ~all`
- 创建第三个 `TXT` 解析记录，设置`cfid`，否则会报无权限调用。
    
    参考：[**Secure your domain name against spoofing with Domain Lockdown™**](https://support.mailchannels.com/hc/en-us/articles/16918954360845-Secure-your-domain-name-against-spoofing-with-Domain-Lockdown-)
    
    - Name: `_mailchannels.yourdomain.com`
    - Value: `v=mc1 cfid=yourdomain.workers.dev`
    
    &gt; `cfid` 会在你测试的报错信息中看到，注意不是workder全url，而是子域名。解析后等待生效大约需要半天
    &gt; 
- 创建第四个 `TXT` 解析记录，`DMARC` 记录来强制使用DKIM签名
    
    参考：[**Adding a DKIM Signature**](https://support.mailchannels.com/hc/en-us/articles/7122849237389-Adding-a-DKIM-Signature)
    
    - Name: `_dmarc.yourdomain.com`
    - Value: `v=DMARC1; p=reject; adkim=s; aspf=s; rua=mailto:YYY; ruf=mailto:YYY pct=100; fo=1;`
</code></pre>
<h4 id="6-验证DKIM解析，有可能需要等待几个小时，DNS-记录才会更新。-https-dmarcly-com-tools-dkim-record-checker"><a href="#6-验证DKIM解析，有可能需要等待几个小时，DNS-记录才会更新。-https-dmarcly-com-tools-dkim-record-checker" class="headerlink" title="6. 验证DKIM解析，有可能需要等待几个小时，DNS 记录才会更新。 https://dmarcly.com/tools/dkim-record-checker"></a>6. 验证DKIM解析，有可能需要等待几个小时，DNS 记录才会更新。 <a href="https://dmarcly.com/tools/dkim-record-checker">https://dmarcly.com/tools/dkim-record-checker</a></h4><pre><code>正常显示如下：

![dkim1](./images/dkim1.png)
</code></pre>
<h4 id="7-代码解压，wrangler-部署到-cf-worker"><a href="#7-代码解压，wrangler-部署到-cf-worker" class="headerlink" title="7. 代码解压，wrangler 部署到 cf worker"></a>7. 代码解压，wrangler 部署到 cf worker</h4><p><a href="./images/cloudflare-send-email-service.zip">cloudflare-send-email-service.zip</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wrangler deploy --name mail</span><br></pre></td></tr></table></figure>

<h4 id="8-验证，邮件发送成功，返回状态码-202"><a href="#8-验证，邮件发送成功，返回状态码-202" class="headerlink" title="8. 验证，邮件发送成功，返回状态码 202"></a>8. 验证，邮件发送成功，返回状态码 <code>202</code></h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location <span class="string">&#x27;https://mail.yourdomain.workers.dev&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;sender_email=admin@yourdomain.com&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;sender_name=xxx&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;recipient_email=xxx@gmail.com&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;subject=测试&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;message=111&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;recipient_name=user&#x27;</span></span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>电子邮件</tag>
      </tags>
  </entry>
</search>
